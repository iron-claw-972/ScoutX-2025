{"ast":null,"code":"'use strict';\n\nvar cookie = require('cookie');\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nvar cookie__namespace = /*#__PURE__*/_interopNamespaceDefault(cookie);\nfunction hasDocumentCookie() {\n  const testingValue = typeof global === 'undefined' ? undefined : global.TEST_HAS_DOCUMENT_COOKIE;\n  if (typeof testingValue === 'boolean') {\n    return testingValue;\n  }\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nfunction parseCookies(cookies) {\n  if (typeof cookies === 'string') {\n    return cookie__namespace.parse(cookies);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nfunction readCookie(value, options = {}) {\n  const cleanValue = cleanupCookieValue(value);\n  if (!options.doNotParse) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {\n      // At least we tried\n    }\n  }\n  // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n  return value;\n}\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n  return value;\n}\nclass Cookies {\n  constructor(cookies, defaultSetOptions = {}) {\n    this.changeListeners = [];\n    this.HAS_DOCUMENT_COOKIE = false;\n    this.update = () => {\n      if (!this.HAS_DOCUMENT_COOKIE) {\n        return;\n      }\n      const previousCookies = this.cookies;\n      this.cookies = cookie__namespace.parse(document.cookie);\n      this._checkChanges(previousCookies);\n    };\n    const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n    this.cookies = parseCookies(cookies || domCookies);\n    this.defaultSetOptions = defaultSetOptions;\n    this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n  }\n  _emitChange(params) {\n    for (let i = 0; i < this.changeListeners.length; ++i) {\n      this.changeListeners[i](params);\n    }\n  }\n  _checkChanges(previousCookies) {\n    const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n    names.forEach(name => {\n      if (previousCookies[name] !== this.cookies[name]) {\n        this._emitChange({\n          name,\n          value: readCookie(this.cookies[name])\n        });\n      }\n    });\n  }\n  _startPolling() {\n    this.pollingInterval = setInterval(this.update, 300);\n  }\n  _stopPolling() {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n  }\n  get(name, options = {}) {\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n    return readCookie(this.cookies[name], options);\n  }\n  getAll(options = {}) {\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n    const result = {};\n    for (let name in this.cookies) {\n      result[name] = readCookie(this.cookies[name], options);\n    }\n    return result;\n  }\n  set(name, value, options) {\n    if (options) {\n      options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n    } else {\n      options = this.defaultSetOptions;\n    }\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    this.cookies = Object.assign(Object.assign({}, this.cookies), {\n      [name]: stringValue\n    });\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookie__namespace.serialize(name, stringValue, options);\n    }\n    this._emitChange({\n      name,\n      value,\n      options\n    });\n  }\n  remove(name, options) {\n    const finalOptions = options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), {\n      expires: new Date(1970, 1, 1, 0, 0, 1),\n      maxAge: 0\n    });\n    this.cookies = Object.assign({}, this.cookies);\n    delete this.cookies[name];\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookie__namespace.serialize(name, '', finalOptions);\n    }\n    this._emitChange({\n      name,\n      value: undefined,\n      options\n    });\n  }\n  addChangeListener(callback) {\n    this.changeListeners.push(callback);\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.addEventListener('change', this.update);\n      } else {\n        this._startPolling();\n      }\n    }\n  }\n  removeChangeListener(callback) {\n    const idx = this.changeListeners.indexOf(callback);\n    if (idx >= 0) {\n      this.changeListeners.splice(idx, 1);\n    }\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.removeEventListener('change', this.update);\n      } else {\n        this._stopPolling();\n      }\n    }\n  }\n}\nmodule.exports = Cookies;","map":{"version":3,"names":["cookie","require","_interopNamespaceDefault","e","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","default","freeze","cookie__namespace","hasDocumentCookie","testingValue","global","undefined","TEST_HAS_DOCUMENT_COOKIE","document","parseCookies","cookies","parse","readCookie","value","options","cleanValue","cleanupCookieValue","doNotParse","JSON","substr","Cookies","constructor","defaultSetOptions","changeListeners","HAS_DOCUMENT_COOKIE","update","previousCookies","_checkChanges","domCookies","_emitChange","params","i","length","names","Set","concat","name","_startPolling","pollingInterval","setInterval","_stopPolling","clearInterval","doNotUpdate","getAll","result","set","assign","stringValue","stringify","serialize","remove","finalOptions","expires","Date","maxAge","addChangeListener","callback","push","window","cookieStore","addEventListener","removeChangeListener","idx","indexOf","splice","removeEventListener","module","exports"],"sources":["/Users/maxwelltan/Documents/GitHub/ScoutingApp2025/node_modules/universal-cookie/cjs/index.js"],"sourcesContent":["'use strict';\n\nvar cookie = require('cookie');\n\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\n\nvar cookie__namespace = /*#__PURE__*/_interopNamespaceDefault(cookie);\n\nfunction hasDocumentCookie() {\n    const testingValue = typeof global === 'undefined'\n        ? undefined\n        : global.TEST_HAS_DOCUMENT_COOKIE;\n    if (typeof testingValue === 'boolean') {\n        return testingValue;\n    }\n    // Can we get/set cookies on document.cookie?\n    return typeof document === 'object' && typeof document.cookie === 'string';\n}\nfunction parseCookies(cookies) {\n    if (typeof cookies === 'string') {\n        return cookie__namespace.parse(cookies);\n    }\n    else if (typeof cookies === 'object' && cookies !== null) {\n        return cookies;\n    }\n    else {\n        return {};\n    }\n}\nfunction readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        }\n        catch (e) {\n            // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === 'j' && value[1] === ':') {\n        return value.substr(2);\n    }\n    return value;\n}\n\nclass Cookies {\n    constructor(cookies, defaultSetOptions = {}) {\n        this.changeListeners = [];\n        this.HAS_DOCUMENT_COOKIE = false;\n        this.update = () => {\n            if (!this.HAS_DOCUMENT_COOKIE) {\n                return;\n            }\n            const previousCookies = this.cookies;\n            this.cookies = cookie__namespace.parse(document.cookie);\n            this._checkChanges(previousCookies);\n        };\n        const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n        this.cookies = parseCookies(cookies || domCookies);\n        this.defaultSetOptions = defaultSetOptions;\n        this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n    }\n    _emitChange(params) {\n        for (let i = 0; i < this.changeListeners.length; ++i) {\n            this.changeListeners[i](params);\n        }\n    }\n    _checkChanges(previousCookies) {\n        const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n        names.forEach((name) => {\n            if (previousCookies[name] !== this.cookies[name]) {\n                this._emitChange({\n                    name,\n                    value: readCookie(this.cookies[name]),\n                });\n            }\n        });\n    }\n    _startPolling() {\n        this.pollingInterval = setInterval(this.update, 300);\n    }\n    _stopPolling() {\n        if (this.pollingInterval) {\n            clearInterval(this.pollingInterval);\n        }\n    }\n    get(name, options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        return readCookie(this.cookies[name], options);\n    }\n    getAll(options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        const result = {};\n        for (let name in this.cookies) {\n            result[name] = readCookie(this.cookies[name], options);\n        }\n        return result;\n    }\n    set(name, value, options) {\n        if (options) {\n            options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n        }\n        else {\n            options = this.defaultSetOptions;\n        }\n        const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n        this.cookies = Object.assign(Object.assign({}, this.cookies), { [name]: stringValue });\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookie__namespace.serialize(name, stringValue, options);\n        }\n        this._emitChange({ name, value, options });\n    }\n    remove(name, options) {\n        const finalOptions = (options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\n        this.cookies = Object.assign({}, this.cookies);\n        delete this.cookies[name];\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookie__namespace.serialize(name, '', finalOptions);\n        }\n        this._emitChange({ name, value: undefined, options });\n    }\n    addChangeListener(callback) {\n        this.changeListeners.push(callback);\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.addEventListener('change', this.update);\n            }\n            else {\n                this._startPolling();\n            }\n        }\n    }\n    removeChangeListener(callback) {\n        const idx = this.changeListeners.indexOf(callback);\n        if (idx >= 0) {\n            this.changeListeners.splice(idx, 1);\n        }\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.removeEventListener('change', this.update);\n            }\n            else {\n                this._stopPolling();\n            }\n        }\n    }\n}\n\nmodule.exports = Cookies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}